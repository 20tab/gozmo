package gozmo

// Events are generated by components and invoke the OnEvent() method of the
// ComponentEvent interface.

type Event struct {
	Sender *GameObject
	Msg    string
}

type ComponentEvent interface {
	OnEvent(gameObject *GameObject, event *Event)
}

func (gameObject *GameObject) EnqueueEvent(sender *GameObject, msg string) {
	event := Event{Sender: sender, Msg: msg}
	gameObject.events = append(gameObject.events, &event)
}

// iterate the GameObject event queue and call OnEvent on
// each component implementing it
func (gameObject *GameObject) ManageEvents() {
	for _, event := range gameObject.events {
		for _, componentName := range gameObject.componentsKeys {
			component := gameObject.components[componentName]
			componentEvent, ok := component.(ComponentEvent)
			if ok {
				componentEvent.OnEvent(gameObject, event)
			}
		}
	}
	gameObject.events = nil
}
